name: Build and Deploy Docker Images

# TODO: add linting
# TODO: do scan/linting before push, fail job if above treshold
# --> add matrix to build-deploy

on:
  workflow_call:
    inputs:
      cache_key:
        description: "Cache key for retrieving pre-downloaded dependencies"
        required: true
        type: string
      scan_enabled:
        description: "Run linting, vuln, config, secret scans, and SBOMs before push"
        required: false
        type: boolean
        default: true
    secrets:
      DEV_API_KEY:
        description: "API key used for Wildfly DEV_MODE"
        required: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write
      contents: read
      security-events: write
    outputs:
      database_digest: ${{ steps.push-sign.outputs.database_digest }}
      wildfly_digest: ${{ steps.push-sign.outputs.wildfly_digest }}
      httpd_digest: ${{ steps.push-sign.outputs.httpd_digest }}
    env:
      IMAGE_PREFIX: ghcr.io/aktin/notaufnahme-dwh-
      SERVICES: database,wildfly,httpd
    steps:
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Restore cached downloads
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: src/downloads/
          key: ${{ inputs.cache_key }}

      - name: Build Docker images
        env:
          DEV_API_KEY: ${{ secrets.DEV_API_KEY }}
        working-directory: src
        run: ./build.sh --create-latest

      - name: Config scan
        if: inputs.scan_enabled
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # v0.33.1
        with:
          scan-type: config
          scanners: config
          scan-ref: src/build
          format: sarif
          output: trivy-config.sarif
          exit-code: '0'

      - name: Upload config scan results
        if: inputs.scan_enabled
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v.3.30.3
        with:
          sarif_file: trivy-config.sarif
          category: trivy-config

      - name: Secrets scan
        if: inputs.scan_enabled
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # v0.33.1
        with:
          scan-type: fs
          scanners: secret
          scan-ref: src/build
          format: sarif
          output: trivy-secrets.sarif
          exit-code: '0'

      - name: Upload secrets scan results
        if: inputs.scan_enabled
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v.3.30.3
        with:
          sarif_file: trivy-secrets.sarif
          category: trivy-secrets

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push and sign images, capture digests
        id: push-sign
        run: |
          set -euo pipefail
          for SERVICE in ${SERVICES//,/ }; do
            IMAGE="${IMAGE_PREFIX}${SERVICE}"
            docker push --all-tags "$IMAGE"
            # capture the registry digest for :latest and sign ONLY that
            # pushing :latest again is very cheap because of content-addressable layers in ghcr
            LATEST_DIGEST="$(docker push "${IMAGE}:latest" | grep -Eo 'sha256:[0-9a-f]{64}' | tail -n1)"
            if [[ -z "$LATEST_DIGEST" ]]; then
              echo "Failed to resolve digest for ${IMAGE}:latest" >&2
              exit 1
            fi
            cosign sign --yes "${IMAGE}@${LATEST_DIGEST}"
            echo "${SERVICE}_digest=${LATEST_DIGEST}" >> "$GITHUB_OUTPUT"
          done

      - name: Upload compose artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: compose-yml
          path: src/build/compose.yml
          if-no-files-found: error
          retention-days: 1

  scan:
    needs: build-deploy
    if: inputs.scan_enabled
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        include:
          - svc: database
            digest: ${{ needs.build-deploy.outputs.database_digest }}
          - svc: wildfly
            digest: ${{ needs.build-deploy.outputs.wildfly_digest }}
          - svc: httpd
            digest: ${{ needs.build-deploy.outputs.httpd_digest }}
    env:
      IMAGE_PREFIX: ghcr.io/aktin/notaufnahme-dwh-
    steps:
      - name: Vulnerabilities scan
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # v0.33.1
        with:
          scan-type: image
          image-ref: ${{ env.IMAGE_PREFIX }}${{ matrix.svc }}@${{ matrix.digest }}
          format: sarif
          output: trivy-${{ matrix.svc }}.sarif
          exit-code: '0'
          severity: 'HIGH,CRITICAL'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v.3.30.3
        with:
          sarif_file: trivy-${{ matrix.svc }}.sarif
          category: trivy-${{ matrix.svc }}

  sbom:
    needs: build-deploy
    if: inputs.scan_enabled
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write
      contents: read
    strategy:
      matrix:
        include:
          - svc: database
            digest: ${{ needs.build-deploy.outputs.database_digest }}
          - svc: wildfly
            digest: ${{ needs.build-deploy.outputs.wildfly_digest }}
          - svc: httpd
            digest: ${{ needs.build-deploy.outputs.httpd_digest }}
    env:
      IMAGE_PREFIX: ghcr.io/aktin/notaufnahme-dwh-
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate SBOM
        uses: anchore/sbom-action@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0.20.5
        with:
          image: ${{ env.IMAGE_PREFIX }}${{ matrix.svc }}@${{ matrix.digest }}
          output-file: ${{ matrix.svc }}.sbom.xml
          format: cyclonedx
          upload-artifact: false

      - name: Attest SBOM
        run: cosign attest --yes --type cyclonedx --predicate "${{ matrix.svc }}.sbom.xml" "${{ env.IMAGE_PREFIX }}${{ matrix.svc }}@${{ matrix.digest }}"

  provenance:
    needs: build-deploy
    if: inputs.scan_enabled
    permissions:
      id-token: write
      contents: read
      actions: read
      attestations: write
      packages: write
    strategy:
      matrix:
        include:
          - svc: database
            digest: ${{ needs.build-deploy.outputs.database_digest }}
          - svc: wildfly
            digest: ${{ needs.build-deploy.outputs.wildfly_digest }}
          - svc: httpd
            digest: ${{ needs.build-deploy.outputs.httpd_digest }}
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ghcr.io/aktin/notaufnahme-dwh-${{ matrix.svc }}
      digest: ${{ matrix.digest }}
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}
