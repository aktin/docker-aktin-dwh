name: Build and Deploy Docker Images

on:
  workflow_call:
    inputs:
      cache_key:
        description: "Cache key for retrieving pre-downloaded dependencies"
        required: true
        type: string
    secrets:
      DEV_API_KEY:
        description: "API key used for Wildfly DEV_MODE"
        required: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.9.1

      - name: Restore cached downloads
        uses: actions/cache@v4
        with:
          path: src/downloads/
          key: ${{ inputs.cache_key }}

      - name: Build Docker images
        env:
          DEV_API_KEY: ${{ secrets.DEV_API_KEY }}
        working-directory: src
        run: ./build.sh --create-latest

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy and sign images
        id: deploy-sign
        run: |
          set -euo pipefail
          for SERVICE in database wildfly httpd; do
            IMAGE="ghcr.io/aktin/notaufnahme-dwh-${SERVICE}"
            docker push --all-tags "$IMAGE"
            # capture the registry digest for :latest and sign ONLY that
            # pushing :latest again is very cheap because of content-addressable layers in ghcr
            LATEST_DIGEST="$(docker push "${IMAGE}:latest" | awk '/digest: sha256:/ {print $NF}' | tail -n1)"
            if [[ -z "$LATEST_DIGEST" ]]; then
              echo "Failed to resolve digest for ${IMAGE}:latest" >&2
              exit 1
            fi
            cosign sign --yes "${IMAGE}@${LATEST_DIGEST}"
          done

      - name: Upload compose artifact
        uses: actions/upload-artifact@v4
        with:
          name: compose-yml
          path: src/build/compose.yml
          if-no-files-found: error
