name: Check Base Container Update

on:
  workflow_call:
    inputs:
      container:
        description: "The container image name on Docker Hub"
        required: true
        type: string
      version_key:
        description: "The variable name to extract the version from 'src/resources/versions'"
        required: true
        type: string
      architecture:
        description: "The image architecture to check (default: 'amd64')"
        required: false
        type: string
        default: 'amd64'
    outputs:
      update:
        description: "True if container has a new digest"
        value: ${{ jobs.check.outputs.update }}

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      update: ${{ steps.compare-digest.outputs.update }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src/resources/versions
            .github/
          sparse-checkout-cone-mode: false
          fetch-depth: 1

      - name: Read version from file
        id: read-version
        run: |
          set -euo pipefail
          VERSION_FILE="src/resources/versions"
          VERSION=$(grep "^${{ inputs.version_key }}=" "$VERSION_FILE" | cut -d= -f2)
          if [ -z "$VERSION" ]; then
            echo "Version not found for key: ${{ inputs.version_key }}"
            exit 1
          fi
          echo "CONTAINER=${{ inputs.container }}" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "ARCH=${{ inputs.architecture }}" >> $GITHUB_ENV
          DIGEST_DIR=".github/digests"
          mkdir -p "$DIGEST_DIR"
          echo "DIGEST_FILE=$DIGEST_DIR/digest-${{ inputs.container }}" >> $GITHUB_ENV

      - name: Fetch current digest from Docker Hub
        id: fetch-digest
        run: |
          set -euo pipefail
          URL="https://registry.hub.docker.com/v2/repositories/library/$CONTAINER/tags/$VERSION"
          DIGEST="$(curl -sf "$URL" | jq -r ".images[] | select(.architecture==\"$ARCH\") | .digest" | head -n1)"
          if [ -z "$DIGEST" ] || [ "$DIGEST" == "null" ]; then
            echo "Digest not found for $CONTAINER:$VERSION ($ARCH)" >&2
            exit 1
          fi
          echo "$DIGEST" > current_digest.txt

      - name: Compare digests
        id: compare-digest
        run: |
          set -euo pipefail
          CLEAN_CURRENT="$(tr -d '\n\r' < current_digest.txt)"
          CLEAN_PREVIOUS="$([ -f "$DIGEST_FILE" ] && tr -d '\n\r' < "$DIGEST_FILE" || echo "" )"
          if [ "$CLEAN_CURRENT" != "$CLEAN_PREVIOUS" ]; then
            echo "update=true" >> $GITHUB_OUTPUT
            echo "CHANGED=true" >> $GITHUB_ENV
            echo "$CLEAN_CURRENT" > "$DIGEST_FILE"
          else
            echo "update=false" >> $GITHUB_OUTPUT
            echo "CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Commit updated digest
        if: env.CHANGED == 'true'
        run: |
          set -euo pipefail
          BRANCH="${GITHUB_REF_NAME:-main}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "$BRANCH"
          git checkout -B "$BRANCH" "origin/$BRANCH"
          git add "$DIGEST_FILE"
          git commit -m "chore: update digest for $CONTAINER:$VERSION" || exit 0
          git push origin HEAD:"$BRANCH"
