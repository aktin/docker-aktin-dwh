name: Build and Deploy Docker Images

on:
  workflow_call:
    inputs:
      cache_key:
        description: "Cache key for retrieving pre-downloaded dependencies"
        required: true
        type: string
    secrets:
      DEV_API_KEY:
        description: "API key used for Wildfly DEV_MODE"
        required: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Retrieve Cached Downloads
        uses: actions/cache@v4
        with:
          path: src/downloads/
          key: ${{ inputs.cache_key }}

      - name: Build Dockerfiles
        env:
          DEV_API_KEY: ${{ secrets.DEV_API_KEY }}
        run: ./build.sh --create-latest
        working-directory: src

      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy and Sign Dockerfiles
        run: |
          for SERVICE in database wildfly httpd; do
            IMAGE_NAME=ghcr.io/aktin/notaufnahme-dwh-${SERVICE}

            # Extract service version safely from prod compose.yml
            VERSION=$(grep "image: ${IMAGE_NAME}:" src/build/compose.yml | sed -E 's/.*:\$\{[^:]+:-([^}]+)\}/\1/')
            echo "Detected version for ${SERVICE}: $VERSION"
  
            LATEST_DIGEST=$(docker push IMAGE_NAME:latest | tee /dev/stderr | grep -o 'digest: sha256:[a-f0-9]\+' | awk '{print $2}')
            VERSION_DIGEST=$(docker push IMAGE_NAME:$VERSION | tee /dev/stderr | grep -o 'digest: sha256:[a-f0-9]\+' | awk '{print $2}')
            echo "Signing $LATEST_DIGEST"
            cosign sign --yes IMAGE_NAME@$LATEST_DIGEST
            echo "Signing $VERSION_DIGEST"
            cosign sign --yes IMAGE_NAME@$VERSION_DIGEST
          done
      - name: Commit production compose.yml
        run: |
          mkdir -p generated
          cp src/build/compose.yml generated/compose.yml
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add --force generated/compose.yml
          git commit -m "Update generated compose.yml for release ${{ github.ref_name }}" || echo "No changes to commit"
          git push

      - name: Upload Compose File Artifact
        uses: actions/upload-artifact@v4
        with:
          name: compose-yml
          path: src/build/compose.yml
